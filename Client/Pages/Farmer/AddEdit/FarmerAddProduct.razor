@page "/product/add/{FarmerId:int}"
@page "/product/edit/{ProductId:int}"
@using FarmCentral.Shared.Models;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@using System.Globalization

<PageTitle>Add Product</PageTitle>

<MudDialog>
    <DialogContent>
        <EditForm Model="@product" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="24">
                    <MudCard>
                        <MudCardContent>

                            <MudTextField Label="Product Name"
                                          @bind-Value="product.Name" For="@(() => product.Name)" />
                            <MudNumericField Label="Price" Class="mt-3" Min="0" HideSpinButtons="true" Culture="@_zar"
                                             @bind-Value="product.Price" For="@(() => product.Price)" />
                            <MudSelect T="string" Label="Product Type" @bind-Value="productTypeSelected">
                                @foreach (var productType in productTypes)
                                {
                                    <MudSelectItem Value="@productType.Name" />
                                }
                            </MudSelect>

                        </MudCardContent>
                        <MudCardActions>
                            <MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@Title</MudButton>
                                <MudButton @onclick="@(() => HomePage())" Variant="Variant.Filled" Color="Color.Secondary">Cancel</MudButton>
                            </MudPaper>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>



@code {
    [Parameter]
    public int ProductId { get; set; }
    [Parameter]
    public int FarmerId { get; set; }
    [Parameter]
    public int ProductTypeID { get; set; }
    protected string Title { get; set; } = "Add";
    protected Product product { get; set; } = new Product();
    protected List<ProductType> productTypes { get; set; } = new List<ProductType>();
    public CultureInfo _zar = new CultureInfo("sa-ZAR");
    public string productTypeSelected;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the product types from the API and assign them to the productTypes property
        productTypes = await HttpClient.GetFromJsonAsync<List<ProductType>>("api/ProductType");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProductId != 0)
        {
            Title = "Edit";
            product = await HttpClient.GetFromJsonAsync<Product>($"api/Product/{ProductId}");
        }
    }

    protected async Task SaveProduct()
    {
        product.ProductTypeId = productTypes.Where(x => x.Name == productTypeSelected).FirstOrDefault().ProductTypeId;
        product.FarmerId = FarmerId;
        if (ProductId != 0)
        {
            await HttpClient.PutAsJsonAsync("api/Product", product);
            Snackbar.Add("Updated Product", Severity.Success);
        }
        else
        {
            await HttpClient.PostAsJsonAsync("api/Product", product);
            Snackbar.Add("Added Product", Severity.Success);
        }

        HomePage();
    }

    public void HomePage()
    {
        NavigationManager.NavigateTo("farmerindex");
    }

}
